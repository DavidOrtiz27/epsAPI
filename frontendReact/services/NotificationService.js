import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform, Alert, Linking } from 'react-native';
import Constants from 'expo-constants';

// Configuraci√≥n de notificaciones
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,      // ‚úÖ IMPORTANTE: Mostrar notificaciones
    shouldPlaySound: true,      // ‚úÖ Con sonido
    shouldSetBadge: false,      // Sin badge
    shouldShowBanner: true,     // Banner en iOS
  }),
});

class NotificationService {
  constructor() {
    this.expoPushToken = null;
    this.notificationListener = null;
    this.responseListener = null;
  }

  // Inicializar el servicio de notificaciones
  async initialize() {
    try {
      console.log('üîî Inicializando servicio de notificaciones...');
      
      // Verificar si estamos en un dispositivo real
      if (!Device.isDevice) {
        console.log('‚ö†Ô∏è Las notificaciones no funcionan en simuladores/emuladores');
        return false;
      }

      // Solicitar permisos con explicaci√≥n
      const permissionsGranted = await this.requestPermissionsWithPrompt();
      
      if (!permissionsGranted) {
        console.log('‚ö†Ô∏è Notificaciones no disponibles - permisos no otorgados');
        return false;
      }

      // Registrar para recibir notificaciones push
      const result = await this.registerForPushNotificationsAsync();
      console.log('üìù Resultado del registro:', result);
      
      // Configurar listeners
      this.setupNotificationListeners();
      
      console.log('‚úÖ Servicio de notificaciones inicializado correctamente');
      return true;
    } catch (error) {
      console.error('‚ùå Error initializing notification service:', error);
      return false;
    }
  }

  // Solicitar permisos con explicaci√≥n para el usuario
  async requestPermissionsWithPrompt() {
    try {
      console.log('üîî Verificando si necesitamos solicitar permisos...');
      
      if (!Device.isDevice) {
        console.log('‚ö†Ô∏è No es un dispositivo real, saltando permisos');
        return false;
      }

      const { status: currentStatus } = await Notifications.getPermissionsAsync();
      console.log('üìã Estado actual de permisos:', currentStatus);

      if (currentStatus === 'granted') {
        console.log('‚úÖ Los permisos ya est√°n otorgados');
        return true;
      }

      // Mostrar explicaci√≥n al usuario
      return new Promise((resolve) => {
        if (Platform.OS === 'android') {
          // En Android, directamente solicitamos permisos
          this.requestPermissionsDirectly().then(resolve);
        } else {
          // En iOS, podemos mostrar una explicaci√≥n primero
          this.requestPermissionsDirectly().then(resolve);
        }
      });

    } catch (error) {
      console.error('‚ùå Error solicitando permisos:', error);
      return false;
    }
  }

  // Solicitar permisos directamente
  async requestPermissionsDirectly() {
    try {
      console.log('üîë Solicitando permisos de notificaciones...');
      
      const { status } = await Notifications.requestPermissionsAsync({
        ios: {
          allowAlert: true,
          allowBadge: true,
          allowSound: true,
          allowAnnouncements: false,
        },
      });

      console.log('üìù Resultado de solicitud de permisos:', status);

      if (status === 'granted') {
        console.log('‚úÖ Permisos otorgados exitosamente');
        // Configurar canal de notificaciones para Android
        if (Platform.OS === 'android') {
          await this.setupAndroidChannel();
        }
        return true;
      } else {
        console.log('‚ùå Permisos no otorgados:', status);
        return false;
      }

    } catch (error) {
      console.error('‚ùå Error en solicitud directa de permisos:', error);
      return false;
    }
  }

  // Configurar canal de Android
  async setupAndroidChannel() {
    if (Platform.OS === 'android') {
      console.log('ü§ñ Configurando canales de notificaciones para Android...');
      
      // Canal principal con m√°xima prioridad
      await Notifications.setNotificationChannelAsync('default', {
        name: 'EPS MAPU - Notificaciones Principales',
        description: 'Notificaciones importantes del sistema m√©dico',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#007AFF',
        sound: 'default',
        enableVibrate: true,
        enableLights: true,
        bypassDnd: true, // Saltarse "No molestar"
        showBadge: true,
      });

      // Canal para notificaciones m√©dicas cr√≠ticas
      await Notifications.setNotificationChannelAsync('medical-urgent', {
        name: 'EPS MAPU - M√©dico URGENTE',
        description: 'Notificaciones m√©dicas que requieren atenci√≥n inmediata',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 500, 250, 500, 250, 500],
        lightColor: '#FF3B30',
        sound: 'default',
        enableVibrate: true,
        enableLights: true,
        bypassDnd: true,
        showBadge: true,
      });

      // Canal para recordatorios de citas
      await Notifications.setNotificationChannelAsync('appointments', {
        name: 'EPS MAPU - Citas M√©dicas',
        description: 'Recordatorios y actualizaciones de citas m√©dicas',
        importance: Notifications.AndroidImportance.HIGH,
        vibrationPattern: [0, 300, 200, 300],
        lightColor: '#34C759',
        sound: 'default',
        enableVibrate: true,
        enableLights: true,
        showBadge: true,
      });

      console.log('‚úÖ Canales de Android configurados con m√°xima prioridad');
    }
  }
  async registerForPushNotificationsAsync() {
    let token;

    console.log('üì± Platform:', Platform.OS);
    console.log('üîß Device.isDevice:', Device.isDevice);

    if (Platform.OS === 'android') {
      console.log('ü§ñ Configurando canal de notificaciones para Android...');
      await Notifications.setNotificationChannelAsync('default', {
        name: 'default',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#FF231F7C',
      });
      console.log('‚úÖ Canal de notificaciones configurado');
    }

    if (Device.isDevice) {
      console.log('üìã Verificando permisos de notificaciones...');
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      console.log('üîç Estado actual de permisos:', existingStatus);
      
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        console.log('üîë Solicitando permisos de notificaciones...');
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
        console.log('üìù Resultado de solicitud:', status);
      }
      
      if (finalStatus !== 'granted') {
        console.log('‚ùå Permisos de notificaciones no otorgados');
        console.log('‚ö†Ô∏è Las notificaciones no funcionar√°n sin permisos');
        return null;
      }

      console.log('‚úÖ Permisos de notificaciones otorgados');
      
      try {
        const projectId = Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
        console.log('üéØ Project ID:', projectId);
        
        if (!projectId) {
          throw new Error('Project ID not found');
        }
        
        console.log('üé´ Obteniendo token de Expo Push...');
        token = (await Notifications.getExpoPushTokenAsync({ projectId })).data;
        console.log('üé´ Token obtenido:', token.substring(0, 20) + '...');
      } catch (e) {
        // Fallback para desarrollo
        token = 'ExponentPushToken[development-mode]';
      }
    } else {
      // Para desarrollo en simulador
      token = 'ExponentPushToken[simulator-mode]';
    }

    this.expoPushToken = token;
    return token;
  }

  // Configurar listeners de notificaciones
  setupNotificationListeners() {
    // Listener para cuando se recibe una notificaci√≥n
    this.notificationListener = Notifications.addNotificationReceivedListener(notification => {
      // Manejar notificaci√≥n recibida
    });

    // Listener para cuando el usuario interact√∫a con la notificaci√≥n
    this.responseListener = Notifications.addNotificationResponseReceivedListener(response => {
      // Manejar respuesta a notificaci√≥n
      this.handleNotificationResponse(response);
    });
  }

  // Manejar respuesta a notificaci√≥n
  handleNotificationResponse(response) {
    const data = response.notification.request.content.data;
    
    if (data.type === 'appointment') {
      // Navegar a la pantalla de citas
    } else if (data.type === 'login') {
      // Acci√≥n para login
    }
  }

  // üì° Registrar token en el backend
  async registerTokenWithBackend() {
    try {
      if (!this.expoPushToken) {
        console.log('‚ö†Ô∏è No hay token disponible para registrar');
        return { success: false, reason: 'no_token' };
      }

      console.log('üì° Registrando token en el backend...');
      
      // Importar din√°micamente para evitar dependencias circulares
      const apiService = (await import('./api/api')).default;
      
      const response = await apiService.post('/notifications/register-token', {
        expo_push_token: this.expoPushToken
      });

      if (response.success) {
        console.log('‚úÖ Token registrado exitosamente en el backend');
        return { success: true, message: response.message };
      } else {
        console.error('‚ùå Error registrando token:', response);
        return { success: false, error: response.message };
      }

    } catch (error) {
      console.error('‚ùå Excepci√≥n registrando token en backend:', error);
      return { success: false, error: error.message };
    }
  }

  // Limpiar listeners
  cleanup() {
    if (this.notificationListener) {
      this.notificationListener.remove();
    }
    if (this.responseListener) {
      this.responseListener.remove();
    }
  }

  // === NOTIFICACIONES ESPEC√çFICAS ===

  // Notificaci√≥n de login exitoso
  async showLoginSuccess(userName) {
    try {
      const notification = {
        title: '¬°Bienvenido! üëã',
        body: `Hola ${userName}, has iniciado sesi√≥n exitosamente en EPS API.`,
        data: { 
          type: 'login',
          timestamp: new Date().toISOString()
        },
      };

      await this.sendLocalNotification(notification);
    } catch (error) {
      console.error('‚ùå Error sending login notification:', error);
    }
  }

  // Notificaci√≥n de cita creada (para paciente)
  async showAppointmentCreated(appointmentData) {
    try {
      const date = new Date(appointmentData.fecha).toLocaleDateString('es-ES', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });

      const notification = {
        title: '‚úÖ Cita m√©dica agendada',
        body: `Tu cita con ${appointmentData.medico?.nombre || 'el m√©dico'} ha sido programada para el ${date}.`,
        data: { 
          type: 'appointment',
          subtype: 'created',
          appointmentId: appointmentData.id,
          timestamp: new Date().toISOString()
        },
      };

      await this.sendLocalNotification(notification);
    } catch (error) {
      console.error('‚ùå Error sending appointment created notification:', error);
    }
  }

  // Notificaci√≥n de actualizaci√≥n de estado de cita
  async showAppointmentStatusUpdate(appointmentData, newStatus, doctorName) {
    try {
      let title = '';
      let body = '';
      let emoji = '';

      switch (newStatus) {
        case 'confirmada':
          emoji = '‚úÖ';
          title = 'Cita confirmada';
          body = `El Dr. ${doctorName} ha confirmado tu cita m√©dica.`;
          break;
        case 'cancelada':
          emoji = '‚ùå';
          title = 'Cita cancelada';
          body = `Tu cita con el Dr. ${doctorName} ha sido cancelada.`;
          break;
        case 'realizada':
          emoji = 'üè•';
          title = 'Cita completada';
          body = `Tu consulta con el Dr. ${doctorName} ha sido completada.`;
          break;
        case 'reprogramada':
          emoji = 'üìÖ';
          title = 'Cita reprogramada';
          body = `Tu cita con el Dr. ${doctorName} ha sido reprogramada.`;
          break;
        default:
          emoji = 'üìã';
          title = 'Actualizaci√≥n de cita';
          body = `El estado de tu cita ha sido actualizado a: ${newStatus}.`;
      }

      const notification = {
        title: `${emoji} ${title}`,
        body: body,
        data: { 
          type: 'appointment',
          subtype: 'status_update',
          appointmentId: appointmentData.id,
          newStatus: newStatus,
          timestamp: new Date().toISOString()
        },
      };

      await this.sendLocalNotification(notification);
    } catch (error) {
      console.error('‚ùå Error sending appointment status notification:', error);
    }
  }

  // Notificaci√≥n para recordatorio de cita
  async showAppointmentReminder(appointmentData) {
    try {
      const date = new Date(appointmentData.fecha).toLocaleDateString('es-ES', {
        hour: '2-digit',
        minute: '2-digit'
      });

      const notification = {
        title: '‚è∞ Recordatorio de cita',
        body: `Tienes una cita m√©dica hoy a las ${date} con ${appointmentData.medico?.nombre || 'tu m√©dico'}.`,
        data: { 
          type: 'appointment',
          subtype: 'reminder',
          appointmentId: appointmentData.id,
          timestamp: new Date().toISOString()
        },
      };

      await this.sendLocalNotification(notification);
    } catch (error) {
      console.error('‚ùå Error sending appointment reminder notification:', error);
    }
  }

  // Notificaci√≥n para acciones de usuario (admin)
  async showUserAction(action, userName, message) {
    try {
      let title = '';
      let emoji = '';

      switch (action) {
        case 'delete':
          emoji = 'üóëÔ∏è';
          title = 'Usuario eliminado';
          break;
        case 'update':
          emoji = '‚öôÔ∏è';
          title = 'Usuario actualizado';
          break;
        case 'create':
          emoji = 'üë§';
          title = 'Usuario creado';
          break;
        default:
          emoji = 'üìã';
          title = 'Acci√≥n de usuario';
      }

      const notification = {
        title: `${emoji} ${title}`,
        body: message || `Acci√≥n realizada en el usuario: ${userName}`,
        data: { 
          type: 'user_action',
          subtype: action,
          userName: userName,
          timestamp: new Date().toISOString()
        },
      };

      await this.sendLocalNotification(notification);
    } catch (error) {
      console.error('‚ùå Error sending user action notification:', error);
    }
  }

  // Enviar notificaci√≥n local
  async sendLocalNotification(notificationContent) {
    try {
      await Notifications.scheduleNotificationAsync({
        content: notificationContent,
        trigger: null, // Enviar inmediatamente
      });
    } catch (error) {
      console.error('‚ùå Error sending local notification:', error);
    }
  }

  // Programar notificaci√≥n para m√°s tarde
  async scheduleNotification(notificationContent, triggerDate) {
    try {
      const identifier = await Notifications.scheduleNotificationAsync({
        content: notificationContent,
        trigger: {
          date: triggerDate,
        },
      });
      
      return identifier;
    } catch (error) {
      console.error('‚ùå Error scheduling notification:', error);
      return null;
    }
  }

  // Cancelar notificaci√≥n programada
  async cancelScheduledNotification(identifier) {
    try {
      await Notifications.cancelScheduledNotificationAsync(identifier);
    } catch (error) {
      console.error('‚ùå Error cancelling notification:', error);
    }
  }

  // Obtener token para el backend
  getExpoPushToken() {
    return this.expoPushToken;
  }

  // üéØ FUNCI√ìN PARA SOLICITAR PERMISOS AL HACER LOGIN
  async requestNotificationPermissionsOnLogin() {
    try {
      console.log('üîî Solicitando permisos de notificaciones despu√©s del login...');
      
      if (!Device.isDevice) {
        console.log('‚ö†Ô∏è No es un dispositivo real - permisos no necesarios');
        return { success: false, reason: 'not_device' };
      }

      // Verificar estado actual
      const { status: currentStatus } = await Notifications.getPermissionsAsync();
      console.log('üìã Estado actual de permisos:', currentStatus);

      if (currentStatus === 'granted') {
        console.log('‚úÖ Los permisos ya est√°n otorgados');
        await this.setupAndroidChannel(); // Configurar canales si es necesario
        return { success: true, reason: 'already_granted' };
      }

      // Solicitar permisos
      console.log('üîë Solicitando permisos de notificaciones...');
      const { status: newStatus } = await Notifications.requestPermissionsAsync({
        ios: {
          allowAlert: true,
          allowBadge: true,
          allowSound: true,
          allowAnnouncements: false,
        },
      });

      console.log('üìù Resultado de solicitud de permisos:', newStatus);

      if (newStatus === 'granted') {
        console.log('‚úÖ Permisos otorgados exitosamente');
        await this.setupAndroidChannel(); // Configurar canales para Android
        return { success: true, reason: 'newly_granted' };
      } else {
        console.log('‚ùå Permisos no otorgados:', newStatus);
        return { success: false, reason: 'denied', status: newStatus };
      }

    } catch (error) {
      console.error('‚ùå Error solicitando permisos:', error);
      return { success: false, reason: 'error', error: error.message };
    }
  }
  async sendTestNotification() {
    try {
      console.log('üß™ Enviando notificaci√≥n de prueba...');
      
      const notification = {
        title: 'üß™ Notificaci√≥n de Prueba',
        body: 'Si ves esto, las notificaciones est√°n funcionando correctamente!',
        data: { 
          type: 'test',
          timestamp: new Date().toISOString()
        },
      };

      await this.sendLocalNotification(notification);
      console.log('‚úÖ Notificaci√≥n de prueba enviada');
      return true;
    } catch (error) {
      console.error('‚ùå Error enviando notificaci√≥n de prueba:', error);
      return false;
    }
  }

  // üßπ Limpiar notificaciones programadas
  async clearAllNotifications() {
    try {
      console.log('üßπ Limpiando notificaciones programadas...');
      await Notifications.cancelAllScheduledNotificationsAsync();
      console.log('‚úÖ Notificaciones programadas limpiadas');
      
      const remaining = await Notifications.getAllScheduledNotificationsAsync();
      console.log('ÔøΩ Notificaciones restantes:', remaining.length);
      
      return { success: true, cleared: true, remaining: remaining.length };
    } catch (error) {
      console.error('‚ùå Error limpiando notificaciones:', error);
      return { success: false, error: error.message };
    }
  }

  // üß™ Funci√≥n simple de prueba de notificaciones
  async simpleNotificationTest() {
    try {
      console.log('üß™ === PRUEBA SIMPLE DE NOTIFICACI√ìN ===');
      
      // Limpiar notificaciones previas
      await this.clearAllNotifications();
      
      // Intentar la notificaci√≥n m√°s simple posible
      console.log('üß™ Programando notificaci√≥n simple...');
      
      const notificationId = await Notifications.scheduleNotificationAsync({
        content: {
          title: 'Prueba Simple',
          body: 'Si ves esto, las notificaciones funcionan b√°sicamente',
        },
        trigger: null, // Inmediata
      });
      
      console.log('‚úÖ Notificaci√≥n simple programada con ID:', notificationId);
      
      // Verificar si se program√≥
      const scheduled = await Notifications.getAllScheduledNotificationsAsync();
      console.log('üìã Notificaciones despu√©s de programar:', scheduled.length);
      
      return { 
        success: true, 
        notificationId: notificationId,
        scheduledCount: scheduled.length 
      };
      
    } catch (error) {
      console.error('‚ùå Error en prueba simple:', error);
      return { success: false, error: error.message };
    }
  }
  async diagnoseNotifications() {
    console.log('\nüîç === DIAGN√ìSTICO AVANZADO DE NOTIFICACIONES ===');
    
    try {
      // 1. Verificar dispositivo y plataforma
      const deviceInfo = {
        isDevice: Device.isDevice,
        platform: Platform.OS,
        version: Platform.Version,
      };
      console.log('üì± Informaci√≥n del dispositivo:', deviceInfo);
      
      // 2. Verificar permisos detalladamente
      const permissions = await Notifications.getPermissionsAsync();
      console.log('üîë Permisos completos:', permissions);
      
      // 3. Verificar configuraci√≥n del token
      console.log('‚öôÔ∏è Token disponible:', !!this.expoPushToken);
      console.log('üéØ Project ID:', Constants?.expoConfig?.extra?.eas?.projectId);
      
      // 4. Mostrar instrucciones espec√≠ficas para Android
      if (Platform.OS === 'android') {
        console.log('ü§ñ Ejecutando verificaciones espec√≠ficas para Android...');
        
        Alert.alert(
          "‚ö° IMPORTANTE: Optimizaci√≥n de Bater√≠a",
          "Para GARANTIZAR notificaciones instant√°neas:\n\n" +
          "üì± M√âTODO 1 - Configuraci√≥n:\n" +
          "‚Ä¢ Configuraci√≥n ‚Üí Bater√≠a\n" +
          "‚Ä¢ Optimizaci√≥n de bater√≠a\n" +
          "‚Ä¢ Buscar 'EPS MAPU'\n" +
          "‚Ä¢ Seleccionar 'No optimizar'\n\n" +
          "üö® M√âTODO 2 - Si persiste:\n" +
          "‚Ä¢ Configuraci√≥n ‚Üí Aplicaciones\n" +
          "‚Ä¢ EPS MAPU ‚Üí Bater√≠a\n" +
          "‚Ä¢ Permitir actividad en segundo plano\n\n" +
          "Esto soluciona el retraso de 3 horas.",
          [
            { 
              text: '‚öôÔ∏è Abrir Configuraci√≥n', 
              onPress: () => Linking.openSettings()
            },
            { text: 'M√°s tarde', style: 'cancel' },
            { text: 'Entendido ‚úÖ', style: 'default' }
          ]
        );
      }
      
      // 5. Verificar si estamos en Expo Go
      console.log('üì¶ Verificando entorno de ejecuci√≥n...');
      const isExpoGo = Constants.executionEnvironment === 'standalone' ? false : true;
      console.log('üîç ¬øEjecut√°ndose en Expo Go?:', isExpoGo);
      
      if (isExpoGo) {
        console.log('‚ö†Ô∏è ADVERTENCIA: Ejecut√°ndose en Expo Go');
        console.log('‚ö†Ô∏è Las notificaciones pueden tener limitaciones en Expo Go');
        
        Alert.alert(
          "‚ö†Ô∏è Limitaci√≥n de Expo Go",
          "Est√°s usando Expo Go que tiene limitaciones para notificaciones.\n\n" +
          "üì± Para notificaciones completas:\n" +
          "‚Ä¢ Compila una APK con EAS Build\n" +
          "‚Ä¢ Las notificaciones locales pueden no funcionar completamente\n\n" +
          "üß™ Aun as√≠, intentaremos las pruebas...",
          [{ text: 'Continuar', style: 'default' }]
        );
      }
      
      // 6. Programar m√∫ltiples notificaciones de prueba
      console.log('üß™ Programando notificaciones de prueba...');
      
      try {
        // Notificaci√≥n inmediata
        console.log('üß™ Programando notificaci√≥n inmediata...');
        const immediateId = await Notifications.scheduleNotificationAsync({
          content: {
            title: 'üß™ PRUEBA INMEDIATA',
            body: `Enviada a las ${new Date().toLocaleTimeString()} - Debe llegar AL INSTANTE`,
            channelId: 'medical-urgent',
            priority: 'max',
            sound: 'default',
          },
          trigger: null, // Inmediata
        });
        console.log('‚úÖ Notificaci√≥n inmediata programada con ID:', immediateId);
        
        // Notificaci√≥n en 30 segundos
        console.log('üß™ Programando notificaci√≥n en 30 segundos...');
        const thirtySecId = await Notifications.scheduleNotificationAsync({
          content: {
            title: '‚è∞ PRUEBA 30 SEGUNDOS',
            body: `Programada desde ${new Date().toLocaleTimeString()} - Debe llegar en 30 seg`,
            channelId: 'medical-urgent',
            priority: 'max',
            sound: 'default',
          },
          trigger: { seconds: 30 },
        });
        console.log('‚úÖ Notificaci√≥n 30s programada con ID:', thirtySecId);
        
        // Notificaci√≥n en 2 minutos
        console.log('üß™ Programando notificaci√≥n en 2 minutos...');
        const twoMinId = await Notifications.scheduleNotificationAsync({
          content: {
            title: 'üïê PRUEBA 2 MINUTOS',
            body: `Programada desde ${new Date().toLocaleTimeString()} - Debe llegar en 2 min`,
            channelId: 'medical-urgent',
            priority: 'max',
            sound: 'default',
          },
          trigger: { seconds: 120 },
        });
        console.log('‚úÖ Notificaci√≥n 2min programada con ID:', twoMinId);
        
        // Verificar notificaciones programadas
        const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
        console.log('üìã Total de notificaciones programadas:', scheduledNotifications.length);
        console.log('üìã Notificaciones programadas:', scheduledNotifications.map(n => ({
          id: n.identifier,
          title: n.content.title,
          trigger: n.trigger
        })));
        
        console.log('‚úÖ Todas las notificaciones de prueba programadas exitosamente');
        
        return {
          device: deviceInfo,
          permissions: permissions,
          hasToken: !!this.expoPushToken,
          projectId: Constants?.expoConfig?.extra?.eas?.projectId,
          isExpoGo: isExpoGo,
          testNotifications: {
            immediate: immediateId,
            thirtySeconds: thirtySecId,
            twoMinutes: twoMinId
          },
          scheduledCount: scheduledNotifications.length,
          timestamp: new Date().toISOString()
        };
        
      } catch (notificationError) {
        console.error('‚ùå Error programando notificaciones:', notificationError);
        Alert.alert(
          '‚ùå Error de Notificaciones',
          `No se pudieron programar las notificaciones:\n${notificationError.message}\n\nEsto puede ser debido a limitaciones de Expo Go.`,
          [{ text: 'Entendido' }]
        );
        throw notificationError;
      }
      
    } catch (error) {
      console.error('‚ùå Error en diagn√≥stico avanzado:', error);
      return { error: error.message };
    }
  }
}

// Exportar instancia singleton
const notificationService = new NotificationService();
export default notificationService;